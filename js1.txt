Ajax: 자바스크립트를 이용해 서버와 브라우저가 비동기 방식으로 데이터를 교환할 수 있는 통신 기능.
js는 인터프리터 언어.

변수호이스팅: 변수선언이 소스코드가 순차적으로 실행되는 런타임 이전 단계에서 먼저 실행됨.
                   (변수 선언문이 코드의 선두로 끌어 올려진 것처럼 동작함.)
값의 할당은 소스코드가 순차적으로 실해되는 시점(런타임)에 실행됨.

데이터 타입이 필요한이유: 1.값을 저장할 때 확보해야 하는 메모리 공간의 크기를 결정하기 위해
                                   2.값을 참조할 때 한 번에 읽어 들어야 할 메모리 공간의 크기를 결정하기 위해
                                   3.메모리에서 읽어 들인 2진수를 어떻게 해석할지 결정하기 위해

js는 동적 타입 언어다.
정적 타입 언어- 변수 선언 시점에 변수 타입이 결정되고 변수 타입 변경 불가능.
동적 타입 언어-값을 할당하는 시점에 변수의 타입이 동적으로 결정(타입 추론)되고 변수 타입 언제든지 변경 가능.

객체- 프로토타입 기반 객체지향 언어
          1.객체리터럴 2.Object 생성자 함수 3.생성자 함수 4.Object.create메서드 5.클래스

<원시타입과 객체타입의 비교>
원시타입-변경 불가한 값 ,실제값 저장 ,값에 의한 전달 
객체타입 -변경 가능한 값,참조 값 저장 ,참조에 의한 전달

<함수>
함수선언문은 선언 이전 호출 가능,함수표현식은 선언 이전 호출 불가능.
이유: 생성 시점이 다르기 때문에.

함수표현식은 변수호이스팅이 발생. 즉, undefined가 초기화되 객체를 참조할 수 없음.

js는 렉시컬 스코프를 따른다. 함수를 어디서 호출했는지가 아니라 어디서 정의 했는지에 결정됨.

<객체 리터럴에 의한 객체 생성 방식 문제점>
같은 동작을 하는 객체를 여러개를 만들어야한다.
<생성장 함수에 의한 객체 생성 방식 장점>
객체 리터럴의 단점을 보안함. 객체를 생성하기 위한 클래스처럼 생성자 함수를 사용하여 동일한 동작을하는
객체를 하나의 객체로 표현할 수 있게 한다.

